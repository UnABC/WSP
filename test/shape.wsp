// 円周率M_PIはすでに提供されています

double time_offset_0 = 0.0
double time_offset_1 = M_PI * 2 / 4 // 4頂点なので2πを4分割
double time_offset_2 = M_PI * 4 / 4
double time_offset_3 = M_PI * 6 / 4

int i = 0
int old_time = gettime()
while (1){
	redraw(0)
    cls(0,0,0)

    // 時間を基に色の値を計算（0.0～1.0の範囲）
    // sin関数は-1から1の範囲を返すので、(sin(x) + 1) / 2 で0から1の範囲に正規化
    // double(i)としてiを明示的にdouble型に変換
    double t = double(i) * 0.01 // 時間の進行速度を調整

    // 頂点0の色
    // 255.0を掛けることで浮動小数点演算を強制
    int r0 = int(255.0 * (sin(t + time_offset_0) * 0.5 + 0.5))
    int g0 = int(255.0 * (sin(t + time_offset_0 + M_PI * 2/3) * 0.5 + 0.5))
    int b0 = int(255.0 * (sin(t + time_offset_0 + M_PI * 4/3) * 0.5 + 0.5))
    color(r0, g0, b0, 0)

    // 頂点1の色
    int r1 = int(255.0 * (sin(t + time_offset_1) * 0.5 + 0.5))
    int g1 = int(255.0 * (sin(t + time_offset_1 + M_PI * 2/3) * 0.5 + 0.5))
    int b1 = int(255.0 * (sin(t + time_offset_1 + M_PI * 4/3) * 0.5 + 0.5))
    color(r1, g1, b1, 1)

    // 頂点2の色
    int r2 = int(255.0 * (sin(t + time_offset_2) * 0.5 + 0.5))
    int g2 = int(255.0 * (sin(t + time_offset_2 + M_PI * 2/3) * 0.5 + 0.5))
    int b2 = int(255.0 * (sin(t + time_offset_2 + M_PI * 4/3) * 0.5 + 0.5))
    color(r2, g2, b2, 2)

    // 頂点3の色
    int r3 = int(255.0 * (sin(t + time_offset_3) * 0.5 + 0.5))
    int g3 = int(255.0 * (sin(t + time_offset_3 + M_PI * 2/3) * 0.5 + 0.5))
    int b3 = int(255.0 * (sin(t + time_offset_3 + M_PI * 4/3) * 0.5 + 0.5))
    color(r3, g3, b3, 3)

    // 四角形の描画命令をrectangleに変更 (左上のX, 左上のY, 幅, 高さ)
    quad(260,124, 380,124, 420,298, 220,298)
    
    //line描画テスト
    line(100,100,0,0)
    line(500,80)
    //ellipse描画テスト
    ellipse(400,400,100,50,M_PI/3)
    circle(100,400,100)
    redraw(1)
    i++
    wait(1)
}