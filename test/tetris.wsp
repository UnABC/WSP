ResizeScreen(480,800)
while (i < 7){
	LoadImage("test/image/block("+i+").png",i+1)
	i++
}
mmload("test/audio/redzone.mp3",1)
mmplay(1,-1)

int block_size = 32
int map_sizeX = 15
int map_sizeY = 18
int speed = 3
int cnt = 0
int score = 0
int myID,mineIDs
int px,py
int predict[2]
int myRot
int block[4][2]
int ren
int prm[2]
int rotate_key = 0
int down_key = 0

int blocks[7][6] = [
	[ 0,-1, 0,-2,0, 1],    //縦棒
	[ 0,-1, 1,-1,1, 0],    //正方形
	[-1, 0, 1,-1,1, 0],    //右Z
	[ 1, 0, 1, 1,0,-1],    //左Z
	[ 0, 1, 1, 1,0,-1],    //L字
	[ 0, 1,-1, 1,0,-1],    //逆L字
	[-1, 0, 1, 0,0, 1]     //T字
]

int block_colors[7][3] = [
	[255,95,95],
	[255,210,95],
	[185,255,95],
	[95,255,120],
	[95,255,235],
	[95,160,255],
	[145,95,255]
]

void blockDraw(int current_x,int current_y){
	repeat (4){
		rect(current_x+block[cnt][0]*block_size,current_y+block[cnt][1]*block_size,block_size-2,block_size-2)
	}
}

int map[map_sizeY][map_sizeX]
//ブロック呼び出し
release()

font(30)
//メインループ
while (true){
	int key = getkey("LEFT")*1+getkey("UP")*2+getkey("RIGHT")*4+getkey("DOWN")*8+getkey("SPACE")*16
	if (getkey("ESC"))dialog("pause")
	if (key & 5){
		ren++
	}else{
		ren = 0
	}
	//左移動
	if ((key == 1) && ((ren == 1) || (ren > 8))){
		prm = [px-block_size , py]
		if (hitChk())px -= block_size
	}
	//右移動
	if ((key == 4) && ((ren == 1) || (ren > 8))){
		prm = [px+block_size , py]
		if (hitChk())px += block_size
	}
	//下
	if (key == 8){
		prm = [px,py+block_size]
		if (hitChk()){
			py = prm[1]
		}else{
			fixBlockToMap()
		}
	}
	//回天
	if (key == 16){
		if (rotate_key == 0){
			rotate_key = 1
			myRot = (myRot+1)%4
			getBlock()
			prm = [px,py]
			if (!hitChk()){
				myRot=(myRot+3)%4
				getBlock()
			}
		}
	}else{
		rotate_key = 0
	}
	//自然落下
	prm = [px,py+speed]
	if (hitChk()){
		py = prm[1]
	}else{
		fixBlockToMap()
	}
	
	//落下位置予測
	int i = py/block_size
	while (i < map_sizeY){
		prm = [px,i*block_size]
		if (!hitChk()){
			// 衝突した行(i)の一つ手前(i-1)が最終着地点
			predict = [px, (i - 1) * block_size]
			break
		}
		// もし一番下の行まで衝突しなかった場合
		if (i == map_sizeY - 1){
			predict = [px, i * block_size]
			break
		}
		i++
	}
	//瞬間落下
	if (key == 2){
		if (!down_key){
			down_key = 1
			if (predict[0] > -1){
				px = predict[0]
				py = predict[1]
				mapWrite()
			}
		}
	}else{
		down_key = 0
	}
	
	//描画処理
	redraw(0)
	cls(0,0,0)
	i = 0
	while (i < map_sizeX){
		tx = i
		int j = 0
		while (j < map_sizeY){
			ty = j
			if (int p = map[ty][tx]){
				color(block_colors[p-1][0],block_colors[p-1][1],block_colors[p-1][2])
			}else{
				color(24,24,24)
			}
			rect(tx*block_size,ty*block_size,block_size-2,block_size-2)
			j++
		}
		i++
	}
	//操作中のブロックを描画
	if (1 < cnt){
		color(block_colors[myID][0],block_colors[myID][1],block_colors[myID][2])
		blockDraw(px,min(py,predict[1]))
		if (predict[0] > -1){
			gmode(2)
			color(block_colors[myID][0],block_colors[myID][1],block_colors[myID][2],64)
			blockDraw(predict[0],predict[1])
		}
	}
	gmode(0)
	color(100,100,100)
	rect(360,575,120,123)
	
	color(255,255,255)
	pos(250,578)
	print("NEXT")
	pos(362,577)
	DrawImage(1+mineIDs)
	pos(30,620)
	print("現在のスコア："+score)
	
	pos(0,0)
	color(255,255,255)
	//print(getfps())
	
	redraw(1)
	await()
	//await(16)
}

void fixBlockToMap() {
	// 1. 現在のブロックの真下で、最初に衝突するY座標を探す
	int i = py / block_size
	while (i < map_sizeY) {
		prm = [px, i * block_size]
		if (!hitChk()) {
			// 衝突する行 `i` が見つかったので、その一つ手前の行 `i-1` が最終的な着地点
			py = (i - 1) * block_size
			mapWrite()
			return // マップに書き込んだら関数を終了
		}
		i++
	}

	// 2. もし地面まで全く衝突しなかった場合（空間を落下してきた場合）
	// 一番下の行に着地させる
	py = (map_sizeY - 1) * block_size
	mapWrite()
}

void mapWrite(){
	tx = px/block_size
	ty = py/block_size
	int i = 0
	//ブロック書き込み
	while (i < 4){
		if (ty + block[i][1] <= 0)GameOver()
		map[ty+block[i][1]][tx+block[i][0]] = myID+1
		i++
	}
	//消滅チェック
	i = 0
	while (i < map_sizeY){
		ty = i
		tmp = 0
		int j = 0
		while (j < map_sizeX){
			if (map[ty][j])tmp++
			j++
		}
		//消滅！
		if (tmp == map_sizeX){
			int j = 0
			while (j < ty){
				k = 0
				while (k < map_sizeX){
					map[ty-j][k] = map[ty-j-1][k]
					k++
				}
				
				j++
			}
			j = 0
			while (j < map_sizeX){
				map[0][j] = 0
				j++
			}
			score += 100
		}
		i++
	}
	release()
}

int hitChk(){
	int i = 0
	while (i < 4){
		tx = double(block[i][0])+double(prm[0])/block_size
		ty = double(block[i][1])+double(prm[1])/block_size
		if ((tx < 0) || (tx >= map_sizeX) || (ty >= map_sizeY))return 0
		if (ty >= 0)if (map[ty][tx])return 0
		i++
	}
	return 1
}


void release(){
	cnt++
	int i = 0
	while (i < 2){
		mine_ID = rnd(size(blocks))
		if (cnt != 1){
			myID = mineIDs
			mineIDs = mine_ID
			break
		}else{
			cnt++
			mineIDs = mine_ID
		}
		i++
	}
	px = map_sizeX/2*block_size
	py = block_size
	getBlock()
	predict = [-1,0]
	return
}

void getBlock(){
	int i = 0
	while (i < 3){
		if (myRot == 1){
			block[i] = [-blocks[myID][i*2+1], blocks[myID][i*2  ]]
		}else if (myRot == 2){
			block[i] = [-blocks[myID][i*2  ],-blocks[myID][i*2+1]]
		}else if (myRot == 3){
			block[i] = [ blocks[myID][i*2+1],-blocks[myID][i*2  ]]
		}else{
			block[i] = [ blocks[myID][i*2  ], blocks[myID][i*2+1]]
		}
		i++
	}
	block[3] = [0,0]
}

void GameOver(){
	dialog("GAMEOVER")
	end()
}
