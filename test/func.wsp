//通常void関数のテスト
void test1(){
	print("This is void test.")
	return
}
//引数あり、returnなしのテスト
void test2(string foo){
	print("This is void and print test.This function accepted follow message:"+foo)
}
//引数省略、再帰void関数のテスト
void test3(int n,string str = "Titech"){
	print(str)
	if (n != 0)test3(n-1,str)
	return}
//通常、引数有のテスト
void test4(string str,int n){
	print(str)
	if (n >= 0)test4(str,n-1)
}
//int関数のテスト
int add(int a,int b){
	return a+b
}
//double関数のテスト
double sub(double a,double b){
	return a-b
}
//複数retrun のテスト
string SciKyo(string str){
	if (str == "Tokyo Tech"){
		return "Science Tokyo"
	}else if (str == "Science Tokyo"){
		return "Scikyo!"
	}
	return str
}
//関数内関数呼び出しテスト
int add2(int a,int b){
	int c = add(a,b)
	return c*2
}
//再帰関数のテスト
//a_{n+1} = a_n+1,a_1 =0の漸化式を考える
int recursion(int n){
	if (n == 1)return 0
	return recursion(n-1)+1
}
//参照渡しのテスト
void ref(var tmp){
	tmp = tmp+1
}
double omittion_test(var a,int b = 3,double c){
	a = b+c
	print(a)
	return c*b
}
//エラー関数
/*
int bug(){
	print("ERROR!")
	return
}*/

test1()		//This is a void test
test2("Success!")	//This is void and print test.This function accepted follow message:Success!
test3(1)	//Titech*2
test3(4,"Science Tokyo")	//Science Tokyo*5
test4("Kyoto University",5)	//Kyoto University*5
print(add(3,7))		//10
print(sub(M_PI,M_E))	//0.423311
print(SciKyo("Tokyo Tech"))	//Science Tokyo
print(SciKyo(SciKyo("Tokyo Tech")))	//Scikyo!
print(SciKyo("UTokyo"))	//UTokyo
print(my_abs(-123))	//123
print(add2(3,7))	//20
print(recursion(20))	//19

hoge = 1
ref(hoge)
print(hoge)	//2

print(omittion_test(hoge,,M_PI))	//6,2,9.42...

//関数の定義が後出の場合のテスト
int my_abs(int a){
	return (a<0)?-a:a
}
