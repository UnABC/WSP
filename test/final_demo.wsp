int TEX_METAL = 11
int SCR_BLUR = 12
int PTC_STAR = 7
int PTC_XS = 8
int TEX_TSUBAME_WIN = 13
int TEX_TSUBAME_BIRD = 14

double _2_5MPI = M_DOUBLE_PI/5.0

screen(0,"WSP demo",1600,900)
ScreenPos(0,0,30)
HideMouse()
cls(0,0,0)

mmload("test/audio/demo.mp3",1)

//色々初期化
mkparticle(1,255,255,255)
mkparticle(2,255,255,100)
mkparticle(3,255,100,100)
mkparticle(4,127,255,127)
mkparticle(5,127,255,255)
mkparticle(6,100,127,255)

LoadImage("test/image/star.png",1)
ldparticle(PTC_STAR,1)
LoadImage("test/image/TSUBAME-window.png",TEX_TSUBAME_WIN)
LoadImage("test/image/TSUBAME-bird.png",TEX_TSUBAME_BIRD)

//X
int arr[6] = [4,  4,  30, 30, 150, 30]
mkparticle(8,  200, 200, 400,  arr)

//WSP
int tc = 124
int tx[tc] = [20,14,13,7,2,1,0,-1,-2,-3,-10,-11,-12,-13,-14,-15,-16,-17,-18,20,14,13,7,3,-4,-10,-19,19,14,13,8,4,-5,-10,-20,19,15,12,8,4,-10,-20,19,15,12,8,4,-10,-20,19,15,12,8,3,2,-10,-20,19,15,12,8,2,1,0,-10,-19,18,16,11,9,-1,-2,-3,-10,-11,-12,-13,-14,-15,-16,-17,-18,18,16,11,9,-3,-4,-10,18,16,11,9,4,-5,-10,18,16,11,9,4,-5,-10,18,16,11,9,4,-5,-10,17,10,3,-4,-10,17,10,2,1,0,-1,-2,-3,-10]
int ty[tc] = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-2,-2,-2,-2,-2,-2,-2,-3,-3,-3,-3,-3,-3,-3,-4,-4,-4,-4,-4,-4,-4,-5,-5,-5,-5,-5,-6,-6,-6,-6,-6,-6,-6,-6,-6]
repeat(tc){
	tx[cnt] *= 100
	ty[cnt] *= 100
}
//メタルテクスチャ
LoadImage("test/image/TEX_METAL.png",TEX_METAL)

screen(SCR_BLUR,"",1600,900,16)
gsel(0)

double c
int pmode
int gmd

double cb2,cb4,cb8,cb16,cb32,cb2s,cb4s,cb8s,cb16s,cb32s
double xb2,xb4,xb8,xb16,xb32,xb2s,xb4s,xb8s,xb16s,xb32s
int bcnt
int mode_blur

//初期化完了！！
int time_offset = gettime()
mmplay(1)
mmpos(1,39.9)
while(true){
	if (getkey("ESC"))end()
	
	double fbt = 0.0024 * (gettime()-time_offset)-4.0
	int ibt = int(fbt)
	if (fbt < 0){
		await()
		continue
	}
	
	// cbN : N beat count-up (0.0 -> 1.0)
	
	cb2  = (fbt - (ibt /  2 *  2)) /  2
	cb4  = (fbt - (ibt /  4 *  4)) /  4
	cb8  = (fbt - (ibt /  8 *  8)) /  8
	
	cb16 = (fbt - (ibt / 16 * 16)) / 16
	cb32 = (fbt - (ibt / 32 * 32)) / 32

	cb2s  = cb2  * cb2
	cb4s  = cb4  * cb4
	cb8s  = cb8  * cb8
	cb16s = cb16 * cb16
	cb32s = cb32 * cb32

	// xbN : N beat count-down (1.0 -> 0.0)

	xb2  = 1.0 - cb2
	xb4  = 1.0 - cb4
	xb8  = 1.0 - cb8
	xb16 = 1.0 - cb16
	xb32 = 1.0 - cb32

	xb2s  = xb2  * xb2
	xb4s  = xb4  * xb4
	xb8s  = xb8  * xb8
	xb16s = xb16 * xb16
	xb32s = xb32 * xb32
	
	bcnt = ibt%32//+20
	
	
	redraw(0)
	randomize(0)
	title(getfps())
	pmode = 0
	
	c = 32.0 + cos(cb32 * 12.56637) * 16
	if (bcnt <  8 )  c += xb8s * 160
	if (bcnt >= 24)  c += cb8s * 128
	
	int fase = ibt/32
	if (fase == 0){
		//galaxy()

		WSP2()
	}else if (fase == 1){
		//TSUBAME()
		
		//dialog("ERROR!","error",2)
	}else if (fase == 2){
		WSP1()
	}else if (fase == 3){
		WSP2()
	}else if (fase == 5){
		
	}else{
	
	}
	if (mode_blur){
		gsel(0)
		redraw(0)
		Reset3D()
		cls(0,0,0)
		gmode(0)
		color(0,0,0,mode_blur)
		pos(0,0)
		gcopy(SCR_BLUR)
		mode_blur = 0
	}
	
	redraw(1)
	await()
}

void galaxy(){
	double cc
	if bcnt >= 28 {
		cc = 1.0 + cb4s * 5.0
	} else if bcnt >= 8 {
		cc = 1.0
	} else {
		cc = cb8
	}
	cc += sin(cb32 * 12.56637) / 8
	Set3DCamera(0, 700 + xb32 * 2000, 600)
	
	c = cc*16
	cls(limit(c, 0, 255), limit(1.2 * c, 0, 255), limit(1.4 * c, 0, 255))
	gmode(2)
	// stars
	int alpha1 = limit(224.0*cc,0,255)
	int alpha2 = limit(64.0*cc,0,255)
	int cash = cb32s * 2000 + 2800
	color(0,0,0,alpha1)
	repeat(800){
		double r = rnd(600)
		double f = _2_5MPI * cnt+r / 200.0 + 0.002 * rnd(32768) / (r + 100) - cb32
		double a = double( rnd(5000) ) / (r + 100)
		
		particle(1,  cos(f) * r, sin(f) * r, limit( rnd(5000) - cash, 0, 59999)+(rnd(2)?a:-a),  17.0-0.025*r)
		
		if rnd(4) == 0 {
			color(0,0,0,alpha2)
			particlem(6, 50.0-0.075*r)
			color(0,0,0,alpha1)
		}
		
		if rnd(8) == 0 {
			a = sin(cb32*M_FOUR_PI + cnt*cnt)
			color(0,0,0, a * limit( alpha2, 0, 64 ))
			particlem(PTC_XS, a * 45)
			color(0,0,0,alpha1)
		}//*/
	}//*/
	//X
	color(255,255,255,alpha2)
	particle   (6,  0, 0, 0,  500)
	particlem  (3,  300)
	particlemr (PTC_STAR, cb2s*(bcnt>=30)*200 + 200, -cb32)
	particlemr (PTC_STAR,                       200,  cb32 * 3)
	
	color(255,255,255,alpha1)
	repeat(200){
		particle(1,  rnd(4000)-2000, -rnd(4000), rnd(4000)-2000,  7)
		if rnd(3) == 0 {
			color(255,255,255,alpha2)
			particlem(6, 30)
			color(255,255,255,alpha1)
		}
	}
	
	// フレア
	if bcnt >= 28 {
		Set3DCamera(2)
		alpha1 = limit(cb4s * 224,0,255)
		alpha2 = limit(cb4s * 64 ,0,255)
		repeat(50){
			r = (1.0 - (0.001 * rnd(rnd(1000) + 1))) * cb4 * 0.7 + 0.1
			f = cb32 + rnd(32768)
			color(255,255,255,alpha1)
			particle(1, 0, sin(f) * r, cos(f) * r, 0.02)

			if rnd(3) == 0 {
				color(255,255,255,alpha2)
				particlem (6, 0.10)
			}
		}
	}
	Reset3D()
	gmode(0)
	color(0,0,0)
	rect(0,0,1600,113)
	rect(0,787.5,1600,113)
}
void TSUBAME(){
	if bcnt < 8  c += xb8 * 32
	cls(limit(c, 0, 255), limit(c, 0, 255), limit(c + 32, 0, 255))

	double y,cz,tz
	int TSUBAME_ALPHA
	int TSUBAME_R[4]
	int TSUBAME_G[4]
	int TSUBAME_B[4]
	int TSUBAME_GMODE
	double TSUBAME_X[4]
	double TSUBAME_Y[4]
	double TSUBAME_Z[4]
	if bcnt < 16 {
		y  = 6000.0 - cb16s * 3000
		cz = xb16s * 16000
		tz = cz
		//TSUBAME,Z軸回転
		double theta = cb16*M_DOUBLE_PI
		
		TSUBAME_X[1] = TSUBAME_X[2] = 1000.0*cos(theta)
		TSUBAME_X[0] = TSUBAME_X[3] = -1000.0*cos(theta)
		
		TSUBAME_Y[0] = TSUBAME_Y[3] = 1000.0*sin(theta)
		TSUBAME_Y[1] = TSUBAME_Y[2] = -1000.0*sin(theta)
		
		if (bcnt < 8){
			TSUBAME_Z[1] = TSUBAME_Z[0] = tz-1000.0
			TSUBAME_Z[2] = TSUBAME_Z[3] = tz+1000.0
		}else{
			double theta2 = theta/2
 			TSUBAME_Y += 2000.0*cos(theta2)
			
			TSUBAME_Z[1] = TSUBAME_Z[0] = tz-1000.0*sin(theta2)
			TSUBAME_Z[2] = TSUBAME_Z[3] = tz+1000.0*sin(theta2)
		}
		TSUBAME_ALPHA = (bcnt < 8)?cb8s*255:255
		TSUBAME_GMODE = 1
		TSUBAME_R = TSUBAME_G = TSUBAME_B = 0
	} else {
		y  = xb16s * 3000
		tz = cb16s * 16000
		cz = tz*cb16
		//TSUBAME,X軸回転！
		TSUBAME_X[1] = TSUBAME_X[2] = 1000.0
		TSUBAME_X[0] = TSUBAME_X[3] = -1000.0
		
		double theta2 = min(cb16s*M_PI_2*1.6,M_PI_2)
		TSUBAME_Y[0] = TSUBAME_Y[1] = 1000.0*sin(theta2) - 2000.0*cos(theta2)
		TSUBAME_Y[3] = TSUBAME_Y[2] = -1000.0 -1000.0*cos(theta2)
		
		TSUBAME_Z = min(tz*1.6,16000)
		TSUBAME_Z[2] -= 1000.0*sin(2.0*theta2)
		TSUBAME_Z[3] -= 1000.0*sin(2.0*theta2)
		
		TSUBAME_ALPHA = (xb16s+1.0)*122.5
		TSUBAME_GMODE = 3
		//色の指定
		TSUBAME_R[0] = 255.0 * (sin(fbt) * 0.5 + 0.5)
		TSUBAME_G[0] = 255.0 * (sin(fbt + M_DOUBLE_PI / 3) * 0.5 + 0.5)
		TSUBAME_B[0] = 255.0 * (sin(fbt + M_FOUR_PI   / 3) * 0.5 + 0.5)
		
		TSUBAME_R[1] = 255.0 * (cos(fbt) * 0.5 + 0.5)
		TSUBAME_G[1] = 255.0 * (cos(fbt + M_DOUBLE_PI / 3) * 0.5 + 0.5)
		TSUBAME_B[1] = 255.0 * (cos(fbt + M_FOUR_PI   / 3) * 0.5 + 0.5)
		
		TSUBAME_R[2] = 255.0 * (-sin(fbt) * 0.5 + 0.5)
		TSUBAME_G[2] = 255.0 * (-sin(fbt + M_DOUBLE_PI / 3) * 0.5 + 0.5)
		TSUBAME_B[2] = 255.0 * (-sin(fbt + M_FOUR_PI   / 3) * 0.5 + 0.5)
		
		TSUBAME_R[3] = 255.0 * (-cos(fbt) * 0.5 + 0.5)
		TSUBAME_G[3] = 255.0 * (-cos(fbt + M_DOUBLE_PI / 3) * 0.5 + 0.5)
		TSUBAME_B[3] = 255.0 * (-cos(fbt + M_FOUR_PI   / 3) * 0.5 + 0.5)
	}
	//Z:高さ、Y:奥行
	Set3DCamera( 0, y, cz,  0, 0, tz)

	c += 160
	
	gmode(2)
	color(0, 0, 0,192)
	
	// 極
	repeat(2){
		zz = cnt * 16100
		color(0, 0, 0,48)
		particle(1,  0, 0, zz,  1500)
		color(0, 0, 0,128)
		particlemr(PTC_STAR, 700, -cb32)
		particlemr(PTC_STAR, 700, cb32 * 3)
	}
	//TSUBAME(窓)
	gmode(TSUBAME_GMODE)
	//color(255,255,255,TSUBAME_ALPHA)
	repeat(4){color(TSUBAME_R[cnt],TSUBAME_G[cnt],TSUBAME_B[cnt],TSUBAME_ALPHA,cnt)}
	texture(TEX_TSUBAME_WIN)
	texture3D(1000,-1000,16000,-1000,-1000,16000,-1000,1000,16000,1000,1000,16000)
	gmode(TSUBAME_GMODE)
	texture(TEX_TSUBAME_BIRD)
	//TSUBAME
	texture3D(TSUBAME_X[0],TSUBAME_Y[0],TSUBAME_Z[0],TSUBAME_X[1],TSUBAME_Y[1],TSUBAME_Z[1],TSUBAME_X[2],TSUBAME_Y[2],TSUBAME_Z[2],TSUBAME_X[3],TSUBAME_Y[3],TSUBAME_Z[3])
	texture(-1)
	gmode(2)
	color(0, 0, 0,192)
	// カラフルな浮遊物
	repeat(500){
		particle(1+cnt%6,  rnd(4000)-2000, rnd(4000)-2000, rnd(20000)-2000,  30)

		if rnd(3) == 0 {
			color(0, 0, 0,32)
			particlem(1+cnt%6, 240)
			color(0, 0, 0,192)
		}

		if rnd(16) == 0 {
			a = sin(cb32*M_FOUR_PI + cnt*cnt)
			color(0, 0, 0,a * 72)
			particlem(PTC_XS, a * 480)
			color(0, 0, 0,192)
		}
	}//*/
	//その他浮遊物
	color(0, 0, 0,192)
	repeat(100){
		particle(1,  rnd(10000)-5000, rnd(10000)-5000, rnd(20000)-2000,  30)

		if rnd(3) == 0 {
			color(0, 0, 0,32)
			particlem(6, 240)
			color(0, 0, 0,192)
		}
	}
	
	Reset3D()
	gmode(0)
	color(0,0,0)
	rect(0,0,1600,113)
	rect(0,787.5,1600,113)
}
//完成！
void WSP1(){
	Set3DCamera(xb32 * 5000 - 4500, xb32s*xb32s*xb32s * -3000, 0,  0, xb32s * 2000, 0)
	cls(limit(c, 0, 255), limit(c, 0, 255), limit(c * 2, 0, 255))
	gmd = 160
	wsp_core(xb32 * 700 + 200)
	Reset3D()
	texture(-1)
	gmode(0)
	color(0,0,0)
	rect(0,0,1600,113)
	rect(0,787.5,1600,113)
}

void WSP2(){
	if bcnt >= 24{
		mode_blur = limit(exp(log(0.875 * cb8)*(32.0/(fps+1))) * 256, 32, 256)
		gsel(SCR_BLUR)
	}
	int y = pow(cb32s,3)*3000
	cls(limit(c, 0, 255), limit(c, 0, 255), limit(c * 2, 0, 255))
	if bcnt < 16 {
		double a = xb16s * xb16s * 64
		Reset3D()
		gmode(2)
		color(limit(ginfo_r+a, 0, 255), limit(ginfo_g+a, 0, 255), limit(ginfo_b+a, 0, 255))
		rect(0,0,1600,113)
		rect(0,787.5,1600,113)
		gmode(0)
	}
	Set3DCamera(xb32s * 3000 + cb32s * 8000 - 8000, y, 0,   0, -y, 0)
	
	randomize(0)


	gmd = 160
	if bcnt < 16 {
		gmd += xb16s * 64
	}
	
	pmode = 1
	
	wsp_core(cb32s * 900)
	
	//パーティクル飛び散り
	if bcnt < 16 {
		Set3DCamera(0, -100, 0)
		repeat(150){
			double f = rnd(32768)
			double r = sqrt(cb32) * rnd(200) + 30
			color(0,0,0,xb16s * 48)
			particle(2, cos(f) * r, 0, sin(f) * r / 3, 1)
			color(0,0,0,xb16s * 24)
			if cnt % 3 == 0 {
				particlem(PTC_XS, 4)
			} else {
				particlem(6, 4)
			}
		}
	}//*/
}

void wsp_core(int nx){
	gmode(2)
	color(0,0,0,gmd)
	//テクスチャ
	repeat(tc){
		int x = (rnd(1000) - 500) * nx / 1000
		int z = ty[cnt]
		int y = tx[cnt] - z/5
		particle(6, x, y, z, 60)
		
		if (bcnt < 16) && pmode {
			color(0,0,0,xb16s * 224)
			if cnt%6 {
				particlem(6, 140)
			} else {
				particlem(PTC_STAR, 250)
			}
			color(0,0,0,gmd)
		}
		texture(TEX_METAL,0, 400 + z/3, 64, 32)
		texture3D(x,y - 150,z -  50,x,y + 150,z -  50,x,y + 150,z+50,x,y-150,z+50)
	}
	color(0,0,0,gmd)
	repeat (600){
		particle( 1,  rnd(10000)-5000, rnd(10000)-5000, rnd(10000)-5000,  18)
		if rnd(3) == 0 {
			color(0,0,0,gmd/6)
			particlem(6,  72)
			color(0,0,0,gmd)
		}
	}
}


